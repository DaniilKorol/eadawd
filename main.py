from vkbottle.bot import Bot, Message, MessageEvent
from vkbottle import Keyboard, KeyboardButtonColor, Text, Callback, GroupTypes, GroupEventType
from vkbottle import API, CtxStorage, PhotoMessageUploader, BaseStateGroup, DocMessagesUploader
from vkbottle.modules import json
import asyncio
import time
import sqlite3
import re


db = sqlite3.connect('server.db')
sql = db.cursor()

sql.execute("""CREATE TABLE IF NOT EXISTS users (
	nickname TEXT,
	vk_id TEXT,
	group_user INT
	)""")

user_groups = """
	USER GROUPS:
		1 - –ì–£ –ú–í–î-–ü
		2 - –ì–£ –ú–í–î-–ú
		3 - –ì–£ –ú–í–î-–ù
		4 - –ê–¥–≤–æ–∫–∞—Ç
		5 - –õ–∏–¥–µ—Ä –ì–£ –ú–í–î-–ü
		6 - –õ–∏–¥–µ—Ä –ì–£ –ú–í–î-–ú
		7 - –õ–∏–¥–µ—Ä –ì–£ –ú–í–î-–ù
		8 - –õ–∏–¥–µ—Ä –ß–û
"""


user_groups_list = ['–ì–£ –ú–í–î-–ü', '–ì–£ –ú–í–î-–ú', '–ì–£ –ú–í–î-–ù', '–ê–¥–≤–æ–∫–∞—Ç', '–õ–∏–¥–µ—Ä –ì–£ –ú–í–î-–ü', '–õ–∏–¥–µ—Ä –ì–£ –ú–í–î-–ú', '–õ–∏–¥–µ—Ä –ì–£ –ú–í–î-–ù', '–õ–∏–¥–µ—Ä –ß–û']

sql.execute("""CREATE TABLE IF NOT EXISTS orders (
	numbers INT,
	nickname TEXT,
	vk_id TEXT,
	reasons TEXT,
	jailtime INT,
	where_from TEXT,
	screen TEXT
	)""")


db.commit()

bot = Bot("vk1.a.u2g2xziFM_wi4hS3AMdtQgk1E2-9m52xaV2Cw5xVmBMUsJ3sWDD6vTOFwySnjokH0obnZgLQp1WWn1yzfnEHSuwO8356w1p6RpEXx0pJvWR_dEwopRh2LreJ7wUYiRgWcnKe50zjbtmUs-93YBe5OMUhpcg19h8jPHLgL28kmoKoHFTtcHR-a7YD9Du2zynBC1C2CrZTR339SUGkw2Kc6w")
photo_uploader = PhotoMessageUploader(bot.api)
doc_uploader = DocMessagesUploader(bot.api)
print('[+] VK –°onnected')

def findWholeWord(w):
    return re.compile('{0}'.format(w), flags=re.IGNORECASE).search

def get_from_where(text):
	if findWholeWord('–ø—Ä–∏–≤')(text.lower()) != None:
		return 1
	elif findWholeWord('–º–∏—Ä')(text.lower()) != None:
		return 2
	elif findWholeWord('–Ω–µ–≤')(text.lower()) != None:
		return 3
	else:
		return 4

async def get_data_from_link(api: API, link: str) -> bytes:
	return bytes(await api.http_client.request_content(link, "GET"))

ctx = CtxStorage()
class RegData(BaseStateGroup):
	NICKNAME = 0
	REASON = 1
	JAILTIME = 2
	SCREENSHOT = 3
	WHERE_FROM = 4

@bot.on.message(text="/id")
async def id_peer(message: Message):
	await message.answer(message.peer_id)

@bot.on.message(text="/bd12931273129512346")
async def get_bd(message: Message):
	for user in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE vk_id = '{message.from_id}'"):
		if user[2] == 8:
		    doc = await doc_uploader.upload(title='server.db', file_source=r"server.db", peer_id=message.peer_id)
		    await message.answer(attachment=doc)
		else:
			await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤‚ùó')

@bot.on.message(text=["/–≥—É–≤–¥", "/guvd"])
async def get_guvd(message: Message):
	text = '[–ì–£ –ú–í–î-–ü]'
	for user in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '5'"):
		text += f'\n@id{user[0]} ({user[1]}) -> [{user_groups_list[int(user[2])-1]}]'
	for user in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '1'"):
		text += f'\n@id{user[0]} ({user[1]}) -> [{user_groups_list[int(user[2])-1]}]'
	text += '\n\n[–ì–£ –ú–í–î-–ú]'
	for user in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '6'"):
		text += f'\n@id{user[0]} ({user[1]}) -> [{user_groups_list[int(user[2])-1]}]'
	for user in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '2'"):
		text += f'\n@id{user[0]} ({user[1]}) -> [{user_groups_list[int(user[2])-1]}]'
	text += '\n\n[–ì–£ –ú–í–î-–ù]'
	for user in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '7'"):
		text += f'\n@id{user[0]} ({user[1]}) -> [{user_groups_list[int(user[2])-1]}]'
	for user in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '3'"):
		text += f'\n@id{user[0]} ({user[1]}) -> [{user_groups_list[int(user[2])-1]}]'
	await message.answer(text)

@bot.on.message(text=["/–∞–¥–≤–æ–∫–∞—Ç—ã", "/lawyers"])
async def get_guvd(message: Message):
	text = '[–ê–¥–≤–æ–∫–∞—Ç—ã]'
	for user in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '8'"):
		text += f'\n@id{user[0]} ({user[1]}) -> [{user_groups_list[int(user[2])-1]}]'
	for user in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '4'"):
		text += f'\n@id{user[0]} ({user[1]}) -> [{user_groups_list[int(user[2])-1]}]'
	await message.answer(text)

@bot.on.private_message(text="–ù–∞—á–∞—Ç—å")
async def start_message(message: Message):
	keyboard = (Keyboard(one_time=False, inline=False).add(Text("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"), color=KeyboardButtonColor.POSITIVE)).get_json()
	await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ø–æ–∫—É –¥–∞–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", keyboard=keyboard)


@bot.on.private_message(lev="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: Message):
	await bot.state_dispenser.set(message.peer_id, RegData.NICKNAME)
	return '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:'

@bot.on.private_message(state=RegData.NICKNAME)
async def get_user_order(message: Message):
	ctx.set("nickname", message.text)
	await bot.state_dispenser.set(message.peer_id, RegData.REASON)
	return '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–¥–µ—Ä–∂–∞–Ω–∏—è:'

@bot.on.private_message(state=RegData.REASON)
async def get_reason_order(message: Message):
	ctx.set("reason", message.text)
	await bot.state_dispenser.set(message.peer_id, RegData.JAILTIME)
	return '–í–≤–µ–¥–∏—Ç–µ c—Ä–æ–∫ –∑–∞–∫–ª—é—á–µ–Ω–∏—è (/jailtime):'


@bot.on.private_message(state=RegData.JAILTIME)
async def get_jailtime_order(message: Message):
	ctx.set("jailtime", message.text)
	await bot.state_dispenser.set(message.peer_id, RegData.SCREENSHOT)
	return '–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è (—Å–∫—Ä–∏–Ω —Å /timestamp –∏ /jailtime):'


@bot.on.private_message(state=RegData.SCREENSHOT)
async def get_screen_order(message: Message):
	if message.attachments:
		ctx.set("screen", message.attachments[0].photo.sizes[4].url)
		await bot.state_dispenser.set(message.peer_id, RegData.WHERE_FROM)
		return '–í–≤–µ–¥–∏—Ç–µ –≤ –∫–∞–∫–æ–π –¥–µ–∂—É—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å:'
	else:
		await message.answer(f'–í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ —Ñ–æ—Ç–æ.\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–æ–≤–æ‚ùó')
		await bot.state_dispenser.delete(message.peer_id)

@bot.on.private_message(state=RegData.WHERE_FROM)
async def get_screen_order(message: Message):
	ctx.set("from_where", message.text)

	for i in sql.execute(f"SELECT numbers FROM orders"):
		number_order = i[0] + 1
	nickname = ctx.get('nickname')
	reason = ctx.get('reason')
	jailtime = ctx.get('jailtime')
	screen = ctx.get('screen')
	from_where = ctx.get('from_where')
	from_where_2 = get_from_where(from_where)
	text_message = f'–ó–∞–∫–∞–∑: ‚Ññ{number_order}\nNickname: {nickname} ü§µ\n–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏—è: {reason} ‚õìÔ∏è\n–°—Ä–æ–∫ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏—è: {jailtime} ‚åö\n–î–µ–∂—É—Ä–Ω–∞—è —á–∞—Å—Ç—å: {from_where} üè¢'

	KEYBOARD = (Keyboard(inline=True).add(Callback(f"–í–∑—è—Ç—å‚ùó", payload={"peer": message.peer_id, 'text':text_message, 'type_btn':'en', 'number_order':number_order, 'guvd':from_where_2, 'nickname':nickname}), color=KeyboardButtonColor.POSITIVE).add(Callback(f"–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚ùó", payload={"peer": message.peer_id, 'text':text_message, 'type_btn':'dis', 'number_order':number_order, 'guvd':from_where_2, 'nickname':nickname}), color=KeyboardButtonColor.NEGATIVE).get_json())
	sql.execute(f"INSERT INTO orders VALUES (?, ?, ?, ?, ?, ?, ?)", (number_order, nickname, message.peer_id, reason, jailtime, from_where, screen))
	db.commit()
	bytePicture =  await get_data_from_link(bot.api, link=screen)
	photo = await photo_uploader.upload(bytePicture)
	await message.answer(f'–í–∞—à nickname: {nickname} ü§µ\n–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏—è: {reason} ‚õìÔ∏è\n–°—Ä–æ–∫ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏—è: {jailtime} ‚åö\n–î–µ–∂—É—Ä–Ω–∞—è —á–∞—Å—Ç—å: {from_where} üè¢\n\n–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ üó£', attachment=photo, random_id=0)
	await bot.api.messages.send(peer_id=2000000002, message=text_message, random_id=0, keyboard=KEYBOARD, attachment=photo)
	await bot.state_dispenser.delete(message.peer_id)


def give_group(rank_from, rank_user):
	if rank_from == 5 and rank_user == 1:
		return True
	elif rank_from == 6 and rank_user == 2:
		return True
	elif rank_from == 7 and rank_user == 3:
		return True
	elif rank_from == 8:
		return True
	else:
		return False

@bot.on.message(text=["/—Ä–æ–ª—å <item>", '/—Ä–æ–ª—å'])
async def get_role(message: Message, item=None):
	if item == None:
		for i in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE vk_id = {message.from_id}"):
			await message.answer(f'–í–∞—à–∞ —Ä–æ–ª—å: [{user_groups_list[int(i[2])-1]}]')
	else:
		vk_link = item.replace('https://vk.com/','').replace('https://m.vk.com/','').replace("@","")
		if vk_link[0] == "[":
			vk_link = vk_link.split("|")[1][0:-1]
		user_info = await bot.api.request('users.get', {'user_ids' : vk_link})
		if len(user_info['response']) != 0:
			for i in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE vk_id = {user_info['response'][0]['id']}"):
				await message.answer(f'–£ @id{i[0]} ({i[1]}) —Ä–æ–ª—å: [{user_groups_list[int(i[2])-1]}]')
		else:
			await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ—Ç‚ùó")


@bot.on.message(text=["/user <item>", '/user'])
async def new_user(message: Message, item=None):
	for i in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE vk_id = {message.from_id}"):
		if i[2] >= 5:
			if item != None:
				args_command = item.split()
				if len(args_command) == 3:
					if args_command[0].split('/')[0] == 'https:' or args_command[0][0] == '[':
						if args_command[1].isdigit():
							if int(args_command[1]) <= 8:
								if give_group(i[2], int(args_command[1])):
									vk_link = args_command[0].replace('https://vk.com/','').replace('https://m.vk.com/','').replace("@","")
									if vk_link[0] == "[":
										vk_link = vk_link.split("|")[1][0:-1]
									user_info = await bot.api.request('users.get', {'user_ids' : vk_link})
									if len(user_info['response']) != 0:
										sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE vk_id = {user_info['response'][0]['id']}")
										if sql.fetchone() is None:
											sql.execute(f"INSERT INTO users VALUES (?, ?, ?)", (args_command[2], user_info['response'][0]['id'], int(args_command[1])))
											db.commit()
											await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫—É @id{user_info['response'][0]['id']} ({args_command[2]}) –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å [{user_groups_list[int(args_command[1])-1]}]‚ùó")
										else:
											for i2 in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE vk_id = {user_info['response'][0]['id']}"):
												if int(i2[2]) <= int(i[2]):
													sql.execute(f"UPDATE users SET group_user = {int(args_command[1])} WHERE vk_id = {user_info['response'][0]['id']}")
													db.commit()
													await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫—É @id{user_info['response'][0]['id']} ({args_command[2]}) –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å [{user_groups_list[int(i2[2])-1]} -> {user_groups_list[int(args_command[1])-1]}]‚ùó")
												else:
													await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤‚ùó")
									else:
										await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ—Ç‚ùó")
								else:
									await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤‚ùó")
							else:
								await message.answer(f"–†–æ–ª–∏ —Å —Ç–∞–∫–æ–π —Ü–∏—Ñ—Ä–æ–π –Ω–µ—Ç‚ùó\n\n" + user_groups)
						else:
							await message.answer(f"–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π‚ùó\n\n" + user_groups)
					else:
						await message.answer(f"–ü–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚ùó")
				else:
					await message.answer(f"–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –æ–¥–∏–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã‚ùó")
		else:
			await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤‚ùó")


@bot.on.message(text=["/clear <item>", '/clear'])
async def delete_user(message: Message, item=None):
	for i in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE vk_id = {message.from_id}"):
		if i[2] >= 5:
			if item != None:
				if item.split('/')[0] == 'https:' or item[0] == '[':
					vk_link = item.replace('https://vk.com/','').replace('https://m.vk.com/','').replace("@","")
					if vk_link[0] == "[":
						vk_link = vk_link.split("|")[1][0:-1]
					user_info = await bot.api.request('users.get', {'user_ids' : vk_link})
					if len(user_info['response']) != 0:
						sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE vk_id = {user_info['response'][0]['id']}")
						if sql.fetchone() is None:
							await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω‚ùó")
						else:
							for user in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE vk_id = {user_info['response'][0]['id']}"):
								if give_group(i[2], int(user[2])):
									sql.execute('DELETE FROM users WHERE vk_id=?', (user_info['response'][0]['id'],))
									await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ @id{user[0]} ({user[1]}) –±—ã–ª —É–¥–∞–ª–µ–Ω‚ùó")
									db.commit()
								else:
									await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤‚ùó")
					else:			
						await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–µ—Ç‚ùó")
				else:
					await message.answer(f"–ê—Ä–≥—É–º–µ–Ω—Ç–æ–º –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚ùó")
			else:
				await message.answer(f"–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è‚ùó")
		else:
			await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤‚ùó")



@bot.on.raw_event(GroupEventType.MESSAGE_EVENT, dataclass=MessageEvent)
async def message_event_handler(event: MessageEvent):
	message_id = event.object.conversation_message_id
	peer_id = event.object.peer_id
	type_btn = event.object.payload["type_btn"]
	sql.execute(f"SELECT vk_id FROM users WHERE vk_id = {event.object.user_id}")
	if sql.fetchone() is None:
		await bot.api.messages.send(peer_id=peer_id, message=f'@id{event.object.user_id} (NoName) –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ª–∏–¥–µ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –í–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ, –¥–∞–±—ã –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤‚ùó', random_id=0)
	else:
		for user in sql.execute(f"SELECT nickname, vk_id, group_user FROM users WHERE vk_id = '{event.object.user_id}'"):
			if type_btn == 'en':
				user_id_inlian = event.object.payload["peer"]
				user_id_accepted = event.object.user_id
				text = event.object.payload["text"]
				number_order = event.object.payload["number_order"]
				guvd = event.object.payload["guvd"]
				nickname_order = event.object.payload["nickname"]
				await bot.api.messages.send(peer_id=peer_id, message=f'@id{user_id_accepted} ({user[0]}) –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ ‚Ññ{number_order}‚ùó', random_id=0)
				await bot.api.messages.send(peer_id=int(user_id_inlian), message=f'‚ö† –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è–ª–∏. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞‚ùó', random_id=0)
				KEYBOARD = (Keyboard(inline=True)
					.add(Callback(f"–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞‚ùó", payload={"peer": user_id_inlian, 'text':text, 'type_btn':'dis_proc', 'user_id_accepted': user_id_accepted, 'number_order': number_order}), color=KeyboardButtonColor.NEGATIVE)
					.add(Callback(f"–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω‚ùó", payload={"peer": user_id_inlian, 'text':text, 'type_btn':'—Åompleted', 'user_id_accepted': user_id_accepted, 'number_order': number_order}), color=KeyboardButtonColor.POSITIVE).row()
					.add(Callback(f"–£–≤–µ–¥–æ–º–∏—Ç—å –ì–£–í–î‚ùó", payload={"peer": user_id_inlian, 'text':text, 'type_btn':'allow_guvd', 'user_id_accepted': user_id_accepted, 'guvd':guvd, 'number_order': number_order, 'nickname':nickname_order})).get_json())
				text = text + f'\n\n‚ö†–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –ü—Ä–∏–Ω—è—Ç‚ùó\n–ü—Ä–∏–Ω—è–ª: @id{user_id_accepted} ({user[0]})'
				await bot.api.request('messages.edit', {"peer_id": int(peer_id), "conversation_message_id": int(message_id), 'message':text, 'keyboard':KEYBOARD})
			elif type_btn == 'dis':
				user_id_inlian = event.object.payload["peer"]
				user_id_accepted = event.object.user_id
				text = event.object.payload["text"]
				number_order = event.object.payload["number_order"]
				await bot.api.messages.send(peer_id=peer_id, message=f'@id{user_id_accepted} ({user[0]}) –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{number_order}‚ùó', random_id=0)
				await bot.api.messages.send(peer_id=int(user_id_inlian), message=f'‚ö† –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏‚ùó', random_id=0)
				text = text + f'\n\n‚ö†–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –û—Ç–∫–ª–æ–Ω–µ–Ω‚ùó\n–û—Ç–∫–ª–æ–Ω–∏–ª: @id{user_id_accepted} ({user[0]})'
				await bot.api.request('messages.edit', {"peer_id": int(peer_id), "conversation_message_id": int(message_id), 'message':text})
			elif type_btn == 'dis_proc':
				user_id_inlian = event.object.payload["peer"]
				user_id_accepted = event.object.payload["user_id_accepted"]
				text = event.object.payload["text"]
				number_order = event.object.payload["number_order"]
				if event.object.user_id == user_id_accepted or user[2] == 8:
					await bot.api.messages.send(peer_id=peer_id, message=f'@id{user_id_accepted} ({user[0]}) –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{number_order}‚ùó', random_id=0)
					await bot.api.messages.send(peer_id=int(user_id_inlian), message=f'‚ö† –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏‚ùó', random_id=0)
					text = text + f'\n\n‚ö†–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –û—Ç–∫–ª–æ–Ω–µ–Ω‚ùó\n–û—Ç–∫–ª–æ–Ω–∏–ª: @id{user[1]} ({user[0]})'
					await bot.api.request('messages.edit', {"peer_id": int(peer_id), "conversation_message_id": int(message_id), 'message':text})				
				else:
					await event.show_snackbar("–í—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –ø–æ —ç—Ç–æ–º—É –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.")
			elif type_btn == '—Åompleted':
				user_id_inlian = event.object.payload["peer"]
				user_id_accepted = event.object.payload["user_id_accepted"]
				text = event.object.payload["text"]
				number_order = event.object.payload["number_order"]
				if event.object.user_id == user_id_accepted or user[2] == 8:
					await bot.api.messages.send(peer_id=peer_id, message=f'@id{user[1]} ({user[0]}) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{number_order}‚ùó', random_id=0)
					await bot.api.messages.send(peer_id=int(user_id_inlian), message=f'‚ö† –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—Å‚ùó', random_id=0)
					text = text + f'\n\n‚ö†–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –í—ã–ø–æ–ª–Ω–µ–Ω‚ùó\n–í—ã–ø–æ–ª–Ω–∏–ª: @id{user[1]} ({user[0]})'
					await bot.api.request('messages.edit', {"peer_id": int(peer_id), "conversation_message_id": int(message_id), 'message':text})
				else:
					await event.show_snackbar("–í—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –ø–æ —ç—Ç–æ–º—É –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.")
			elif type_btn == 'allow_guvd':
				user_id_inlian = event.object.payload["peer"]
				user_id_accepted = event.object.payload["user_id_accepted"]
				text = event.object.payload["text"]
				number_order = event.object.payload["number_order"]
				guvd = event.object.payload["guvd"]
				nickname_order = event.object.payload["nickname"]
				if event.object.user_id == user_id_accepted or user[2] == 8:
					if guvd == 1:
						allow_guvd = f'–£–≤–∞–∂–∞–µ–º—ã–µ, –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑‚ùó\n–î–µ–∂—É—Ä–Ω–∞—è —á–∞—Å—Ç—å: –ü—Ä–∏–≤–æ–ª–∂—Å–∫\n'
						for i in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '5'"):
							allow_guvd += f'@id{i[0]} ({i[1]}), '
						for i in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '1'"):
							allow_guvd += f'@id{i[0]} ({i[1]}), '
						allow_guvd += f'\nNickname –∫–ª–∏–µ–Ω—Ç–∞: @id{user_id_inlian} ({nickname_order})\nNickname –∞–¥–≤–æ–∫–∞—Ç–∞: @id{user[1]} ({user[0]})'
						await bot.api.messages.send(peer_id=2000000003, message=allow_guvd, random_id=0)
					elif guvd == 2:
						allow_guvd = f'–£–≤–∞–∂–∞–µ–º—ã–µ, –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑‚ùó\n–î–µ–∂—É—Ä–Ω–∞—è —á–∞—Å—Ç—å: –ú–∏—Ä–Ω—ã–π\n'
						for i in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '6'"):
							allow_guvd += f'@id{i[0]} ({i[1]}), '
						for i in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '2'"):
							allow_guvd += f'@id{i[0]} ({i[1]}), '
						allow_guvd += f'\nNickname –∫–ª–∏–µ–Ω—Ç–∞: @id{user_id_inlian} ({nickname_order})\nNickname –∞–¥–≤–æ–∫–∞—Ç–∞: @id{user[1]} ({user[0]})'
						await bot.api.messages.send(peer_id=2000000003, message=allow_guvd, random_id=0)
					elif guvd == 3:
						allow_guvd = f'–£–≤–∞–∂–∞–µ–º—ã–µ, –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑‚ùó\n–î–µ–∂—É—Ä–Ω–∞—è —á–∞—Å—Ç—å: –ù–µ–≤—Å–∫–∏–π\n'
						for i in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '7'"):
							allow_guvd += f'@id{i[0]} ({i[1]}), '
						for i in sql.execute(f"SELECT vk_id, nickname, group_user FROM users WHERE group_user = '3'"):
							allow_guvd += f'@id{i[0]} ({i[1]}), '
						allow_guvd += f'\nNickname –∫–ª–∏–µ–Ω—Ç–∞: @id{user_id_inlian} ({nickname_order})\nNickname –∞–¥–≤–æ–∫–∞—Ç–∞: @id{user[1]} ({user[0]})'
						await bot.api.messages.send(peer_id=2000000003, message=allow_guvd, random_id=0)
					elif guvd == 4:
						await event.show_snackbar("–ì–£ –ú–í–î –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ, –≤–∞–º —Å—Ç–æ–∏—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏—Ö –æ—Ç–º–µ—Ç–∏—Ç—å!")
				else:
					await event.show_snackbar("–í—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑, –ø–æ —ç—Ç–æ–º—É –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –µ–≥–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.")

bot.run_forever()